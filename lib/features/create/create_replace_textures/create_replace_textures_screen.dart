import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:retro/features/create/create_replace_textures/create_replace_textures_viewmodel.dart';
import 'package:retro/ui/components/custom_scaffold.dart';

class CreateReplaceTexturesScreen extends StatefulWidget {
  const CreateReplaceTexturesScreen({super.key});

  @override
  _CreateReplaceTexturesScreenState createState() =>
      _CreateReplaceTexturesScreenState();
}

class _CreateReplaceTexturesScreenState extends State<CreateReplaceTexturesScreen> {
  @override
  Widget build(BuildContext context) {
    final CreateReplaceTexturesViewModel viewModel =
        Provider.of<CreateReplaceTexturesViewModel>(context);

    return CustomScaffold(
      title: "Replace Textures",
      subtitle: "Replace textures from an OTR with custom (non-hd) ones",
      onBackButtonPressed: () {
        viewModel.reset();
        Navigator.pop(context);
      },
      content: Expanded(
        child: Padding(
            padding: const EdgeInsets.all(20),
            child: stepContent(viewModel, context))
      )
    );
  }
}

Widget stepContent(CreateReplaceTexturesViewModel viewModel, BuildContext context) {
  final ThemeData theme = Theme.of(context);
  final TextTheme textTheme = theme.textTheme;

  switch (viewModel.currentStep) {
    case CreateReplacementTexturesStep.question:
      return Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            "Do you already have a texture replacement folder?",
            style: textTheme.headline6,
          ),
          SizedBox(
            width: 500,
            child: Text(
              "If you have a folder generated by this tool with replacements, select Yes. If you don't have one, select No and we'll get you started with creating replacements.",
              style: textTheme.caption?.copyWith(color: Colors.grey),
              textAlign: TextAlign.center,
            )
          ),
          const SizedBox(height: 20),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                  onPressed: () {
                    viewModel.onUpdateStep(CreateReplacementTexturesStep.selectFolder);
                  },
                  child: const Text("Yes")),
              const SizedBox(width: 20),
              ElevatedButton(
                  onPressed: () {
                    viewModel.onUpdateStep(CreateReplacementTexturesStep.selectOTR);
                  },
                  child: const Text("No")),
            ],
          )
        ],
      );
    case CreateReplacementTexturesStep.selectFolder:
      return Column(
        children: [
          Row(children: [
            Expanded(
                child: TextField(
              enabled: false,
              decoration: InputDecoration(
                border: const OutlineInputBorder(),
                labelText: viewModel.selectedFolderPath ??
                    'Custom Texture Replacements Folder',
              ),
            )),
            const SizedBox(width: 12),
            ElevatedButton(
                onPressed: viewModel.onSelectFolder,
                style: ElevatedButton.styleFrom(minimumSize: const Size(100, 50)),
                child: const Text("Select"))
          ]),
          if (viewModel.selectedFolderPath != null)
            const Text("Content"),
          const Spacer(),
          ElevatedButton(
            onPressed: viewModel.selectedFolderPath?.isEmpty == false ? () {
              viewModel.processFolder();

              // Navigator.of(context).popUntil(ModalRoute.withName("/create_selection"));
            } : null,
            style: ElevatedButton.styleFrom(minimumSize: Size(
              MediaQuery.of(context).size.width * 0.5, 50)
            ),
            child: const Text('Process')
          )
        ],
      );
    case CreateReplacementTexturesStep.selectOTR:
      return Column(
        children: [
          Row(children: [
            Expanded(
                child: TextField(
              enabled: false,
              decoration: InputDecoration(
                border: const OutlineInputBorder(),
                labelText: viewModel.selectedOTRPath ?? 'OTR Path',
              ),
            )),
            const SizedBox(width: 12),
            ElevatedButton(
                onPressed: viewModel.onSelectOTR,
                style: ElevatedButton.styleFrom(minimumSize: const Size(100, 50)),
                child: const Text("Select"))
          ]),
          if (viewModel.processedFiles.isEmpty && viewModel.isProcessing == false)
             Expanded( child: Padding(
              padding: const EdgeInsets.only(top: 20),
              child: Column(
                children: [
                  Text(
                    "Details",
                    style: textTheme.headline5,
                  ),
                  Text("1. Select OTR that you want to replace textures from", style: textTheme.bodyMedium),
                  Text("2. We extract texture assets as PNG with correct folder structure", style: textTheme.bodyMedium),
                  Text("3. You replace the textures in that extraction folder", style: textTheme.bodyMedium),
                  Text("4. Run this flow again and present your extraction folder", style: textTheme.bodyMedium),
                  Text("5. We generate an OTR with the changed textures! ðŸš€", style: textTheme.bodyMedium),
                ],
              ))),
          if (viewModel.processedFiles.isNotEmpty || viewModel.isProcessing)
            Expanded(child: Padding(
              padding: const EdgeInsets.only(top: 20),
              child: viewModel.isProcessing
                ? const Center(child: CircularProgressIndicator())
                : ListView.builder(
                    itemCount: viewModel.processedFiles.keys.length,
                    prototypeItem: const SizedBox(width: 0, height: 20),
                    itemBuilder: (context, index) {
                      return Text(viewModel.processedFiles.keys.elementAt(index));
                    }))),
          Padding(
            padding: const EdgeInsets.only(top: 20.0),
            child: ElevatedButton(
              onPressed: viewModel.selectedOTRPath?.isEmpty == false && !viewModel.isProcessing && viewModel.processedFiles.isEmpty
                ? viewModel.processOTR : null,
              style: ElevatedButton.styleFrom(minimumSize: Size(
                MediaQuery.of(context).size.width * 0.5, 50)
              ),
              child: Text(viewModel.isProcessing ? 'Processing...' : viewModel.processedFiles.isNotEmpty ? 'Extracted ${viewModel.processedFiles.length} Textures' : 'Process')
            ))
        ],
      );
  }
}
